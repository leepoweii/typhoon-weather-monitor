"""
È¢±È¢®Ë≠¶Ë®äÊí≠Â†±Á≥ªÁµ±
Áõ£ÊéßÈáëÈñÄÁ∏£ÂíåÂè∞ÂçóÂ∏ÇÁöÑÈ¢±È¢®ÂèäÂ§©Ê∞£Ë≠¶Â†±Ôºå‰ª•ÂèäÈáëÈñÄÊ©üÂ†¥Âç≥ÊôÇËµ∑ÈôçË≥áË®ä
"""

import asyncio
import httpx
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from contextlib import asynccontextmanager
from fastapi import FastAPI, BackgroundTasks, Request, HTTPException
from fastapi.responses import HTMLResponse
import logging
import hashlib
import hmac
import base64

# LINE Bot SDK
from linebot.v3 import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.messaging import (
    Configuration, ApiClient, MessagingApi, PushMessageRequest, ReplyMessageRequest, 
    TextMessage, FlexMessage, FlexContainer
)
from linebot.v3.webhooks import MessageEvent, TextMessageContent

# Ë®≠ÁΩÆÊó•Ë™å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('typhoon_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# Áî®ÊñºÁèæ‰ª£ FastAPI lifespan ‰∫ã‰ª∂
@asynccontextmanager
async def lifespan(app):
    # ÂïüÂãïÊôÇÈñãÂßãÁõ£Êéß
    task = asyncio.create_task(continuous_monitoring())
    yield
    # FastAPI ÈóúÈñâÊôÇÂèØÂú®ÈÄôË£°Ê∏ÖÁêÜË≥áÊ∫êÔºàÂ¶ÇÊúâÈúÄË¶ÅÔºâ
    task.cancel()

app = FastAPI(title="È¢±È¢®Ë≠¶Ë®äÊí≠Â†±Á≥ªÁµ±", description="Áõ£ÊéßÈáëÈñÄÁ∏£ÂíåÂè∞ÂçóÂ∏ÇÁöÑÈ¢±È¢®Ë≠¶Â†±ÂèäÈáëÈñÄÊ©üÂ†¥Âç≥ÊôÇËµ∑ÈôçË≥áË®ä", lifespan=lifespan)


# ‰∏≠Â§ÆÊ∞£Ë±°ÁΩ≤ API Ë®≠ÂÆö
CWA_BASE_URL = "https://opendata.cwa.gov.tw/api"
from dotenv import load_dotenv
import os
load_dotenv()
API_KEY = os.getenv("CWA_API_KEY", "")

# LINE Bot Ë®≠ÂÆö
LINE_CHANNEL_ID = os.getenv("LINE_CHANNEL_ID", "")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET", "")
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN", "")

# ÂàùÂßãÂåñ LINE Bot
configuration = Configuration(access_token=LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# Áõ£ÊéßË®≠ÂÆö
MONITOR_LOCATIONS = [s.strip() for s in os.getenv("MONITOR_LOCATIONS", "ÈáëÈñÄÁ∏£,Ëá∫ÂçóÂ∏Ç").split(",") if s.strip()]
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "300").split("#")[0].strip())
TRAVEL_DATE = os.getenv("TRAVEL_DATE", "2025-07-06")
CHECKUP_DATE = os.getenv("CHECKUP_DATE", "2025-07-07")
SERVER_PORT = int(os.getenv("PORT", os.getenv("SERVER_PORT", "8000")).split("#")[0].strip())

# ÂÖ®ÂüüËÆäÊï∏ÂÑ≤Â≠òÊúÄÊñ∞ÁãÄÊÖã
latest_alerts = {}
latest_weather = {}
latest_typhoons = {}
latest_airport_departure = {}
latest_airport_arrival = {}
latest_airport_update_time = None
airport_api_status = "Êú™Áü•"  # "Ê≠£Â∏∏", "Áï∞Â∏∏", "Êú™Áü•"
last_notification_status = "SAFE"  # ËøΩËπ§‰∏äÊ¨°ÈÄöÁü•ÁöÑÁãÄÊÖã
line_user_ids = []  # ÂÑ≤Â≠òÊâÄÊúâÂ•ΩÂèãÁöÑUSER ID

class FlexMessageBuilder:
    """LINE Flex Message Âª∫ÊßãÂô®È°ûÂà•ÔºåÁî®ÊñºÂâµÂª∫ÂêÑÁ®ÆË¶ñË¶∫ÂåñÈÄöÁü•Ë®äÊÅØ"""
    
    def __init__(self, base_url: str = None):
        """
        ÂàùÂßãÂåñ FlexMessageBuilder
        
        Args:
            base_url: ÊáâÁî®Á®ãÂºèÁöÑÂü∫Êú¨URLÔºåÁî®ÊñºÁîüÊàêÈÄ£Áµê
        """
        self.base_url = base_url or f"http://localhost:{SERVER_PORT}"
    
    def create_typhoon_status_flex(self, result: Dict) -> FlexContainer:
        """
        ÂâµÂª∫È¢±È¢®ÁãÄÊÖãÁöÑ Flex Message
        
        Args:
            result: ÂåÖÂê´È¢±È¢®Áõ£ÊéßÁµêÊûúÁöÑÂ≠óÂÖ∏
            
        Returns:
            FlexContainer: LINE Flex Message ÂÆπÂô®
        """
        timestamp = datetime.fromisoformat(result["timestamp"].replace('Z', '+00:00'))
        status_color = "#FF4757" if result["status"] == "DANGER" else "#2ED573"
        status_icon = "üî¥" if result["status"] == "DANGER" else "üü¢"
        status_text = "ÊúâÈ¢®Èö™" if result["status"] == "DANGER" else "ÁÑ°ÊòéÈ°ØÈ¢®Èö™"
        
        # ÂàÜÈ°ûË≠¶ÂëäË®äÊÅØ
        flight_warnings = [w for w in result["warnings"] if any(keyword in w for keyword in ['Ëµ∑È£õ', 'ÊäµÈÅî', 'Ëà™Áè≠', 'ÂÅúÈ£õ', 'Âª∂Ë™§', 'Ê©üÂ†¥API'])]
        weather_warnings = [w for w in result["warnings"] if w not in flight_warnings]
        
        # È¢®Èö™Á≠âÁ¥öÈ°èËâ≤
        def get_risk_color(risk_text: str) -> str:
            if "È´òÈ¢®Èö™" in risk_text:
                return "#FF4757"
            elif "‰∏≠È¢®Èö™" in risk_text:
                return "#FFA726"
            else:
                return "#2ED573"
        
        # ÊßãÂª∫Ë≠¶ÂëäÂçÄÂ°ä
        warning_contents = []
        
        if flight_warnings:
            warning_contents.append({
                "type": "box",
                "layout": "vertical",
                "margin": "md",
                "contents": [
                    {
                        "type": "text",
                        "text": "‚úàÔ∏è ÈáëÈñÄÊ©üÂ†¥Âç≥ÊôÇÁãÄÊ≥Å",
                        "weight": "bold",
                        "color": "#1976D2",
                        "size": "sm"
                    }
                ] + [
                    {
                        "type": "text",
                        "text": f"‚Ä¢ {warning}",
                        "size": "xs",
                        "color": "#666666",
                        "wrap": True,
                        "margin": "xs"
                    } for warning in flight_warnings[:3]  # ÊúÄÂ§öÈ°ØÁ§∫3ÂÄãË≠¶Âëä
                ]
            })
        
        if weather_warnings:
            warning_contents.append({
                "type": "box",
                "layout": "vertical",
                "margin": "md",
                "contents": [
                    {
                        "type": "text",
                        "text": "üå™Ô∏è Â§©Ê∞£Ë≠¶Â†±",
                        "weight": "bold",
                        "color": "#F57C00",
                        "size": "sm"
                    }
                ] + [
                    {
                        "type": "text",
                        "text": f"‚Ä¢ {warning}",
                        "size": "xs",
                        "color": "#666666",
                        "wrap": True,
                        "margin": "xs"
                    } for warning in weather_warnings[:3]  # ÊúÄÂ§öÈ°ØÁ§∫3ÂÄãË≠¶Âëä
                ]
            })
        
        if not result["warnings"]:
            warning_contents.append({
                "type": "box",
                "layout": "vertical",
                "margin": "md",
                "contents": [
                    {
                        "type": "text",
                        "text": "‚úÖ ÁõÆÂâçÁÑ°ÁâπÊÆäË≠¶Â†±",
                        "color": "#2ED573",
                        "size": "sm",
                        "weight": "bold"
                    }
                ]
            })
        
        flex_content = {
            "type": "bubble",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üåÄ È¢±È¢®Ë≠¶Ë®äÊí≠Â†±",
                        "weight": "bold",
                        "size": "lg",
                        "color": "#FFFFFF"
                    },
                    {
                        "type": "text",
                        "text": timestamp.strftime('%Y-%m-%d %H:%M'),
                        "size": "xs",
                        "color": "#FFFFFF",
                        "margin": "xs"
                    }
                ],
                "backgroundColor": status_color,
                "paddingAll": "md"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                            {
                                "type": "text",
                                "text": status_icon,
                                "size": "xl",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": f"Ë≠¶ÂëäÁãÄÊÖã: {status_text}",
                                "weight": "bold",
                                "size": "md",
                                "color": status_color,
                                "margin": "sm",
                                "flex": 1
                            }
                        ],
                        "margin": "none"
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "margin": "md",
                        "contents": [
                            {
                                "type": "box",
                                "layout": "horizontal",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": "‚úàÔ∏è",
                                        "size": "sm",
                                        "flex": 0
                                    },
                                    {
                                        "type": "text",
                                        "text": "7/6 ÈáëÈñÄ‚ÜíÂè∞ÂçóËà™Áè≠È¢®Èö™",
                                        "size": "sm",
                                        "color": "#666666",
                                        "margin": "sm",
                                        "flex": 1
                                    },
                                    {
                                        "type": "text",
                                        "text": result['travel_risk'],
                                        "size": "sm",
                                        "color": get_risk_color(result['travel_risk']),
                                        "weight": "bold",
                                        "align": "end",
                                        "flex": 0
                                    }
                                ]
                            },
                            {
                                "type": "box",
                                "layout": "horizontal",
                                "margin": "sm",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": "üè•",
                                        "size": "sm",
                                        "flex": 0
                                    },
                                    {
                                        "type": "text",
                                        "text": "7/7 Âè∞ÂçóÈ´îÊ™¢È¢®Èö™",
                                        "size": "sm",
                                        "color": "#666666",
                                        "margin": "sm",
                                        "flex": 1
                                    },
                                    {
                                        "type": "text",
                                        "text": result['checkup_risk'],
                                        "size": "sm",
                                        "color": get_risk_color(result['checkup_risk']),
                                        "weight": "bold",
                                        "align": "end",
                                        "flex": 0
                                    }
                                ]
                            }
                        ]
                    }
                ] + warning_contents
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "button",
                        "action": {
                            "type": "uri",
                            "label": "Êü•ÁúãË©≥Á¥∞ÂÑÄË°®Êùø",
                            "uri": self.base_url
                        },
                        "style": "primary",
                        "color": "#1976D2"
                    }
                ],
                "margin": "sm"
            }
        }
        
        return FlexContainer.from_dict(flex_content)
    
    def create_airport_status_flex(self, airport_data: Dict) -> FlexContainer:
        """
        ÂâµÂª∫Ê©üÂ†¥ÁãÄÊÖãÁöÑ Flex Message
        
        Args:
            airport_data: ÂåÖÂê´Ê©üÂ†¥Ë≥áË®äÁöÑÂ≠óÂÖ∏
            
        Returns:
            FlexContainer: LINE Flex Message ÂÆπÂô®
        """
        departure_flights = airport_data.get('departure_flights', [])
        arrival_flights = airport_data.get('arrival_flights', [])
        warnings = airport_data.get('warnings', [])
        last_updated = airport_data.get('last_updated', datetime.now().isoformat())
        
        timestamp = datetime.fromisoformat(last_updated.replace('Z', '+00:00'))
        
        # ÊßãÂª∫Ëà™Áè≠Ë≥áË®ä
        flight_contents = []
        
        if warnings:
            warning_color = "#FF4757"
            for warning in warnings[:3]:  # ÊúÄÂ§öÈ°ØÁ§∫3ÂÄãË≠¶Âëä
                flight_contents.append({
                    "type": "text",
                    "text": f"‚ö†Ô∏è {warning}",
                    "size": "xs",
                    "color": warning_color,
                    "wrap": True,
                    "margin": "xs"
                })
        else:
            flight_contents.append({
                "type": "text",
                "text": "‚úÖ Ëà™Áè≠ÁãÄÊ≥ÅÊ≠£Â∏∏",
                "size": "sm",
                "color": "#2ED573",
                "weight": "bold"
            })
        
        # Ê∑ªÂä†Ëà™Áè≠Áµ±Ë®à
        flight_contents.extend([
            {
                "type": "separator",
                "margin": "md"
            },
            {
                "type": "box",
                "layout": "horizontal",
                "margin": "md",
                "contents": [
                    {
                        "type": "text",
                        "text": "‚úàÔ∏è Ëµ∑È£õËà™Áè≠",
                        "size": "sm",
                        "color": "#666666",
                        "flex": 1
                    },
                    {
                        "type": "text",
                        "text": f"{len(departure_flights) if isinstance(departure_flights, list) else 0} Áè≠",
                        "size": "sm",
                        "color": "#1976D2",
                        "weight": "bold",
                        "align": "end",
                        "flex": 0
                    }
                ]
            },
            {
                "type": "box",
                "layout": "horizontal",
                "margin": "sm",
                "contents": [
                    {
                        "type": "text",
                        "text": "üõ¨ ÊäµÈÅîËà™Áè≠",
                        "size": "sm",
                        "color": "#666666",
                        "flex": 1
                    },
                    {
                        "type": "text",
                        "text": f"{len(arrival_flights) if isinstance(arrival_flights, list) else 0} Áè≠",
                        "size": "sm",
                        "color": "#1976D2",
                        "weight": "bold",
                        "align": "end",
                        "flex": 0
                    }
                ]
            }
        ])
        
        flex_content = {
            "type": "bubble",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "‚úàÔ∏è ÈáëÈñÄÊ©üÂ†¥Áõ£Êéß",
                        "weight": "bold",
                        "size": "lg",
                        "color": "#FFFFFF"
                    },
                    {
                        "type": "text",
                        "text": timestamp.strftime('%Y-%m-%d %H:%M'),
                        "size": "xs",
                        "color": "#FFFFFF",
                        "margin": "xs"
                    }
                ],
                "backgroundColor": "#1976D2",
                "paddingAll": "md"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": flight_contents
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "button",
                        "action": {
                            "type": "uri",
                            "label": "Êü•ÁúãÊ©üÂ†¥Ë©≥Á¥∞Ë≥áË®ä",
                            "uri": f"{self.base_url}/api/airport"
                        },
                        "style": "primary",
                        "color": "#1976D2"
                    }
                ],
                "margin": "sm"
            }
        }
        
        return FlexContainer.from_dict(flex_content)
    
    def create_test_notification_flex(self, message: str = "ÈÄôÊòØÊ∏¨Ë©¶Ë®äÊÅØ") -> FlexContainer:
        """
        ÂâµÂª∫Ê∏¨Ë©¶ÈÄöÁü•ÁöÑ Flex Message
        
        Args:
            message: Ê∏¨Ë©¶Ë®äÊÅØÂÖßÂÆπ
            
        Returns:
            FlexContainer: LINE Flex Message ÂÆπÂô®
        """
        timestamp = datetime.now()
        
        flex_content = {
            "type": "bubble",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üß™ Á≥ªÁµ±Ê∏¨Ë©¶",
                        "weight": "bold",
                        "size": "lg",
                        "color": "#FFFFFF"
                    },
                    {
                        "type": "text",
                        "text": timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                        "size": "xs",
                        "color": "#FFFFFF",
                        "margin": "xs"
                    }
                ],
                "backgroundColor": "#9C27B0",
                "paddingAll": "md"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": message,
                        "size": "md",
                        "color": "#333333",
                        "wrap": True
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "text",
                        "text": "‚úÖ LINE Bot ÈÄ£Á∑öÊ≠£Â∏∏\nüì° Áõ£ÊéßÁ≥ªÁµ±ÈÅã‰Ωú‰∏≠\nüîî ÈÄöÁü•ÂäüËÉΩÊ≠£Â∏∏",
                        "size": "sm",
                        "color": "#666666",
                        "margin": "md"
                    }
                ]
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "button",
                        "action": {
                            "type": "uri",
                            "label": "ËøîÂõûÁõ£ÊéßÂÑÄË°®Êùø",
                            "uri": self.base_url
                        },
                        "style": "secondary"
                    }
                ],
                "margin": "sm"
            }
        }
        
        return FlexContainer.from_dict(flex_content)
    
    def create_carousel_flex(self, bubbles: List[Dict]) -> FlexContainer:
        """
        ÂâµÂª∫Ëº™Êí≠Âºè Flex Message
        
        Args:
            bubbles: ÂåÖÂê´Â§öÂÄã bubble ÂÖßÂÆπÁöÑÂàóË°®
            
        Returns:
            FlexContainer: LINE Flex Message ÂÆπÂô®
        """
        flex_content = {
            "type": "carousel",
            "contents": bubbles
        }
        
        return FlexContainer.from_dict(flex_content)

class LineNotifier:
    def __init__(self):
        self.api_client = ApiClient(configuration)
        self.line_bot_api = MessagingApi(self.api_client)
        # ÂàùÂßãÂåñ FlexMessageBuilderÔºå‰ΩøÁî® Zeabur ÊàñÊú¨Âú∞ URL
        self.flex_builder = FlexMessageBuilder(
            base_url=os.getenv("APP_URL", f"http://localhost:{SERVER_PORT}")
        )
    
    def format_typhoon_status(self, result: Dict) -> str:
        """Ê†ºÂºèÂåñÈ¢±È¢®ÁãÄÊÖãË®äÊÅØÔºà‰øùÁïôÊñáÂ≠óÁâàÊú¨‰ΩúÁÇ∫ÂÇôÁî®Ôºâ"""
        timestamp = datetime.fromisoformat(result["timestamp"].replace('Z', '+00:00'))
        status_icon = "üî¥" if result["status"] == "DANGER" else "üü¢"
        status_text = "ÊúâÈ¢®Èö™" if result["status"] == "DANGER" else "ÁÑ°ÊòéÈ°ØÈ¢®Èö™"
        
        message = f"üö® È¢±È¢®Ë≠¶Â†± - {timestamp.strftime('%Y-%m-%d %H:%M')}\n"
        message += f"---------------------------\n"
        message += f"{status_icon} Ë≠¶ÂëäÁãÄÊÖã: {status_text}\n\n"
        message += f"‚úàÔ∏è 7/6 ÈáëÈñÄ‚ÜíÂè∞ÂçóËà™Áè≠È¢®Èö™: {result['travel_risk']}\n"
        message += f"üè• 7/7 Âè∞ÂçóÈ´îÊ™¢È¢®Èö™: {result['checkup_risk']}\n\n"
        
        if result["warnings"]:
            # ÂàÜÈ°ûË≠¶ÂëäË®äÊÅØ
            flight_warnings = [w for w in result["warnings"] if any(keyword in w for keyword in ['Ëµ∑È£õ', 'ÊäµÈÅî', 'Ëà™Áè≠', 'ÂÅúÈ£õ', 'Âª∂Ë™§', 'Ê©üÂ†¥API'])]
            weather_warnings = [w for w in result["warnings"] if w not in flight_warnings]
            
            if flight_warnings:
                message += "‚úàÔ∏è ÈáëÈñÄÊ©üÂ†¥Âç≥ÊôÇÁãÄÊ≥Å:\n"
                for warning in flight_warnings:
                    message += f"‚Ä¢ {warning}\n"
                message += "\n"
            
            if weather_warnings:
                message += "üå™Ô∏è Â§©Ê∞£Ë≠¶Â†±:\n"
                for warning in weather_warnings:
                    message += f"‚Ä¢ {warning}\n"
        else:
            message += "‚úÖ ÁõÆÂâçÁÑ°ÁâπÊÆäË≠¶Â†±\n"
        
        return message.strip()
    
    async def push_typhoon_status_flex(self, result: Dict):
        """Êé®ÈÄÅÈ¢±È¢®ÁãÄÊÖã Flex Message Áµ¶ÊâÄÊúâÂ•ΩÂèã"""
        if not line_user_ids:
            logger.warning("Ê≤íÊúâLINEÂ•ΩÂèãIDÔºåÁÑ°Ê≥ïÁôºÈÄÅÊé®ÈÄÅË®äÊÅØ")
            return
        
        try:
            flex_container = self.flex_builder.create_typhoon_status_flex(result)
            flex_message = FlexMessage(alt_text="È¢±È¢®Ë≠¶Ë®äÊí≠Â†±", contents=flex_container)
            
            for user_id in line_user_ids:
                push_message = PushMessageRequest(
                    to=user_id,
                    messages=[flex_message]
                )
                self.line_bot_api.push_message(push_message)
            logger.info(f"ÊàêÂäüÊé®ÈÄÅ Flex Message Áµ¶ {len(line_user_ids)} ‰ΩçÂ•ΩÂèã")
        except Exception as e:
            logger.error(f"LINE Flex Êé®ÈÄÅÂ§±ÊïóÔºåÂòóË©¶ÊñáÂ≠óÁâàÊú¨: {e}")
            # Â§±ÊïóÊôÇÂõûÈÄÄÂà∞ÊñáÂ≠óË®äÊÅØ
            text_message = self.format_typhoon_status(result)
            await self.push_to_all_friends(text_message)
    
    async def push_airport_status_flex(self, airport_data: Dict):
        """Êé®ÈÄÅÊ©üÂ†¥ÁãÄÊÖã Flex Message Áµ¶ÊâÄÊúâÂ•ΩÂèã"""
        if not line_user_ids:
            logger.warning("Ê≤íÊúâLINEÂ•ΩÂèãIDÔºåÁÑ°Ê≥ïÁôºÈÄÅÊé®ÈÄÅË®äÊÅØ")
            return
        
        try:
            flex_container = self.flex_builder.create_airport_status_flex(airport_data)
            flex_message = FlexMessage(alt_text="ÈáëÈñÄÊ©üÂ†¥Âç≥ÊôÇÁãÄÊ≥Å", contents=flex_container)
            
            for user_id in line_user_ids:
                push_message = PushMessageRequest(
                    to=user_id,
                    messages=[flex_message]
                )
                self.line_bot_api.push_message(push_message)
            logger.info(f"ÊàêÂäüÊé®ÈÄÅÊ©üÂ†¥ Flex Message Áµ¶ {len(line_user_ids)} ‰ΩçÂ•ΩÂèã")
        except Exception as e:
            logger.error(f"LINE Ê©üÂ†¥ Flex Êé®ÈÄÅÂ§±Êïó: {e}")
    
    async def push_to_all_friends(self, message: str):
        """Êé®ÈÄÅÊñáÂ≠óË®äÊÅØÁµ¶ÊâÄÊúâÂ•ΩÂèãÔºàÂÇôÁî®ÊñπÊ≥ïÔºâ"""
        if not line_user_ids:
            logger.warning("Ê≤íÊúâLINEÂ•ΩÂèãIDÔºåÁÑ°Ê≥ïÁôºÈÄÅÊé®ÈÄÅË®äÊÅØ")
            return
        
        try:
            for user_id in line_user_ids:
                push_message = PushMessageRequest(
                    to=user_id,
                    messages=[TextMessage(text=message)]
                )
                self.line_bot_api.push_message(push_message)
            logger.info(f"ÊàêÂäüÊé®ÈÄÅÊñáÂ≠óË®äÊÅØÁµ¶ {len(line_user_ids)} ‰ΩçÂ•ΩÂèã")
        except Exception as e:
            logger.error(f"LINEÊé®ÈÄÅÂ§±Êïó: {e}")
    
    async def reply_typhoon_status_flex(self, reply_token: str, result: Dict):
        """ÂõûË¶ÜÈ¢±È¢®ÁãÄÊÖã Flex Message"""
        try:
            flex_container = self.flex_builder.create_typhoon_status_flex(result)
            flex_message = FlexMessage(alt_text="È¢±È¢®Ë≠¶Ë®äÊí≠Â†±", contents=flex_container)
            
            reply_message = ReplyMessageRequest(
                reply_token=reply_token,
                messages=[flex_message]
            )
            self.line_bot_api.reply_message(reply_message)
            logger.info("ÊàêÂäüÂõûË¶Ü Flex Message")
        except Exception as e:
            logger.error(f"LINE Flex ÂõûË¶ÜÂ§±ÊïóÔºåÂòóË©¶ÊñáÂ≠óÁâàÊú¨: {e}")
            # Â§±ÊïóÊôÇÂõûÈÄÄÂà∞ÊñáÂ≠óË®äÊÅØ
            text_message = self.format_typhoon_status(result)
            await self.reply_message(reply_token, text_message)
    
    async def reply_message(self, reply_token: str, message: str):
        """ÂõûË¶ÜÊñáÂ≠óË®äÊÅØÔºàÂÇôÁî®ÊñπÊ≥ïÔºâ"""
        try:
            reply_message = ReplyMessageRequest(
                reply_token=reply_token,
                messages=[TextMessage(text=message)]
            )
            self.line_bot_api.reply_message(reply_message)
            logger.info("ÊàêÂäüÂõûË¶ÜLINEË®äÊÅØ")
        except Exception as e:
            logger.error(f"LINEÂõûË¶ÜÂ§±Êïó: {e}")
    
    async def send_test_notification_flex(self):
        """ÁôºÈÄÅÊ∏¨Ë©¶ Flex Message"""
        if not line_user_ids:
            logger.warning("Ê≤íÊúâLINEÂ•ΩÂèãIDÔºåÁÑ°Ê≥ïÁôºÈÄÅÊ∏¨Ë©¶Ë®äÊÅØ")
            return
        
        try:
            flex_container = self.flex_builder.create_test_notification_flex("üß™ LINE Bot Flex Message Ê∏¨Ë©¶ÊàêÂäüÔºÅ")
            flex_message = FlexMessage(alt_text="Á≥ªÁµ±Ê∏¨Ë©¶ÈÄöÁü•", contents=flex_container)
            
            for user_id in line_user_ids:
                push_message = PushMessageRequest(
                    to=user_id,
                    messages=[flex_message]
                )
                self.line_bot_api.push_message(push_message)
            logger.info(f"ÊàêÂäüÁôºÈÄÅÊ∏¨Ë©¶ Flex Message Áµ¶ {len(line_user_ids)} ‰ΩçÂ•ΩÂèã")
        except Exception as e:
            logger.error(f"Ê∏¨Ë©¶ Flex Message ÁôºÈÄÅÂ§±Êïó: {e}")

# ÂàùÂßãÂåñLINEÈÄöÁü•Âô®
line_notifier = LineNotifier()

class AirportMonitor:
    """ÈáëÈñÄÊ©üÂ†¥Ëµ∑ÈôçË≥áË®äÁõ£ÊéßÂô®"""
    
    def __init__(self):
        # Ë®≠ÂÆöSSLÈ©óË≠âÁÇ∫False‰ª•Ëß£Ê±∫macOSÁöÑSSLÂïèÈ°å
        self.client = httpx.AsyncClient(timeout=30.0, verify=False)
        self.base_url = "https://tdx.transportdata.tw/api/basic/v2/Air/FIDS/Airport"
        
    async def get_departure_info(self) -> Dict:
        """ÂèñÂæóÈáëÈñÄÊ©üÂ†¥Ëµ∑È£õËà™Áè≠Ë≥áË®ä"""
        try:
            url = f"{self.base_url}/Departure/KNH?$format=JSON"
            headers = {
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
            }
            response = await self.client.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()
            
            # Êõ¥Êñ∞ÂÖ®ÂüüÁãÄÊÖã
            global latest_airport_departure, latest_airport_update_time, airport_api_status
            latest_airport_departure = data
            latest_airport_update_time = datetime.now()
            airport_api_status = "Ê≠£Â∏∏"
            
            logger.info(f"ÊàêÂäüÂèñÂæóÈáëÈñÄÊ©üÂ†¥Ëµ∑È£õË≥áË®äÔºåÂÖ± {len(data) if isinstance(data, list) else 0} Á≠ÜËà™Áè≠")
            return data
        except Exception as e:
            logger.warning(f"ÂèñÂæóÈáëÈñÄÊ©üÂ†¥Ëµ∑È£õË≥áË®äÂ§±Êïó: {e}")
            airport_api_status = "Áï∞Â∏∏"
            return latest_airport_departure  # ËøîÂõûÊúÄÂæå‰∏ÄÊ¨°ÊàêÂäüÁöÑË≥áÊñô
    
    async def get_arrival_info(self) -> Dict:
        """ÂèñÂæóÈáëÈñÄÊ©üÂ†¥ÊäµÈÅîËà™Áè≠Ë≥áË®ä"""
        try:
            url = f"{self.base_url}/Arrival/KNH?$format=JSON"
            headers = {
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
            }
            response = await self.client.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()
            
            # Êõ¥Êñ∞ÂÖ®ÂüüÁãÄÊÖã
            global latest_airport_arrival, latest_airport_update_time, airport_api_status
            latest_airport_arrival = data
            latest_airport_update_time = datetime.now()
            airport_api_status = "Ê≠£Â∏∏"
            
            logger.info(f"ÊàêÂäüÂèñÂæóÈáëÈñÄÊ©üÂ†¥ÊäµÈÅîË≥áË®äÔºåÂÖ± {len(data) if isinstance(data, list) else 0} Á≠ÜËà™Áè≠")
            return data
        except Exception as e:
            logger.warning(f"ÂèñÂæóÈáëÈñÄÊ©üÂ†¥ÊäµÈÅîË≥áË®äÂ§±Êïó: {e}")
            airport_api_status = "Áï∞Â∏∏"
            return latest_airport_arrival  # ËøîÂõûÊúÄÂæå‰∏ÄÊ¨°ÊàêÂäüÁöÑË≥áÊñô
    
    def analyze_flight_status(self, departure_data: Dict, arrival_data: Dict) -> List[str]:
        """ÂàÜÊûêËà™Áè≠ÁãÄÊÖãÔºåÊ™¢Êü•ÂÅúÈ£õÊàñÂª∂Ë™§ÊÉÖÊ≥Å"""
        warnings = []
        
        # Ê™¢Êü• API ÁãÄÊÖã‰∏¶Ê∑ªÂä†Áõ∏ÊáâÁöÑË≠¶Âëä
        global airport_api_status, latest_airport_update_time
        if airport_api_status == "Áï∞Â∏∏":
            if latest_airport_update_time:
                last_update = latest_airport_update_time.strftime('%Y-%m-%d %H:%M')
                warnings.append(f"‚ö†Ô∏è Ê©üÂ†¥APIÈÄ£Á∑öÁï∞Â∏∏Ôºå‰ΩøÁî®ÊúÄÂæåÊõ¥Êñ∞Ë≥áÊñô ({last_update})")
            else:
                warnings.append(f"‚ö†Ô∏è Ê©üÂ†¥APIÈÄ£Á∑öÁï∞Â∏∏ÔºåÁÑ°Ê≥ïÂèñÂæóËà™Áè≠Ë≥áÊñô")
                return warnings
        elif airport_api_status == "Ê≠£Â∏∏" and latest_airport_update_time:
            # Â¶ÇÊûúË≥áÊñôË∂ÖÈÅé10ÂàÜÈêòÊ≤íÊõ¥Êñ∞Ôºå‰πüÊèêÈÜí
            time_diff = (datetime.now() - latest_airport_update_time).total_seconds() / 60
            if time_diff > 10:
                warnings.append(f"üìÖ Ê©üÂ†¥Ë≥áÊñôÂ∑≤ {int(time_diff)} ÂàÜÈêòÊú™Êõ¥Êñ∞")
        
        # ÁõÆÁöÑÂú∞Ê©üÂ†¥‰ª£Á¢ºÂ∞çÊáâ
        airport_names = {
            'TSA': 'ÊùæÂ±±',
            'TPE': 'Ê°ÉÂúí', 
            'KHH': 'È´òÈõÑ',
            'TNN': 'Âè∞Âçó',
            'CYI': 'ÂòâÁæ©',
            'RMQ': 'È¶¨ÂÖ¨',
            'KNH': 'ÈáëÈñÄ'
        }
        
        # ÂàÜÊûêËµ∑È£õËà™Áè≠
        if departure_data and isinstance(departure_data, list):
            for flight in departure_data:
                try:
                    airline_id = flight.get('AirlineID', '')
                    flight_number = flight.get('FlightNumber', '')
                    destination_code = flight.get('ArrivalAirportID', '')
                    destination = airport_names.get(destination_code, destination_code)
                    schedule_time = flight.get('ScheduleDepartureTime', '')
                    actual_time = flight.get('ActualDepartureTime', '')
                    estimated_time = flight.get('EstimatedDepartureTime', '')
                    remark = flight.get('DepartureRemark', '')
                    gate = flight.get('Gate', '')
                    
                    # Ê™¢Êü•ÂÅúÈ£õÊàñÂèñÊ∂àÁãÄÊ≥Å
                    if remark and any(keyword in remark for keyword in ['ÂèñÊ∂à', 'ÂÅúÈ£õ', 'CANCELLED', 'Êö´ÂÅú']):
                        warnings.append(f"‚úàÔ∏è Ëµ∑È£õÂÅúÈ£õ: {airline_id}{flight_number} ‚Üí {destination} ({schedule_time[:16]}) - {remark}")
                    
                    # Ê™¢Êü•Âª∂Ë™§ÁãÄÊ≥ÅÔºàÂØ¶ÈöõÊôÇÈñìËàáÊéíÂÆöÊôÇÈñìÂ∑ÆÁï∞Ôºâ
                    elif actual_time and schedule_time:
                        try:
                            schedule_dt = datetime.fromisoformat(schedule_time)
                            actual_dt = datetime.fromisoformat(actual_time)
                            delay_minutes = (actual_dt - schedule_dt).total_seconds() / 60
                            
                            # Âª∂Ë™§Ë∂ÖÈÅé30ÂàÜÈêòÊâçË≠¶Âëä
                            if delay_minutes >= 30:
                                warnings.append(f"‚è∞ Ëµ∑È£õÂª∂Ë™§: {airline_id}{flight_number} ‚Üí {destination} Âª∂Ë™§ {int(delay_minutes)} ÂàÜÈêò")
                        except:
                            pass
                    
                    # Ê™¢Êü•È†êË®àÊôÇÈñìÂª∂Ë™§
                    elif estimated_time and schedule_time and not actual_time:
                        try:
                            schedule_dt = datetime.fromisoformat(schedule_time)
                            estimated_dt = datetime.fromisoformat(estimated_time)
                            delay_minutes = (estimated_dt - schedule_dt).total_seconds() / 60
                            
                            if delay_minutes >= 30:
                                warnings.append(f"‚è∞ Ëµ∑È£õÈ†êË®àÂª∂Ë™§: {airline_id}{flight_number} ‚Üí {destination} È†êË®àÂª∂Ë™§ {int(delay_minutes)} ÂàÜÈêò")
                        except:
                            pass
                    
                    # Ê™¢Êü•ÁâπÊÆäÁãÄÊÖãÂÇôË®ª
                    if remark and any(keyword in remark for keyword in ['Âª∂Ë™§', 'Áï∞Â∏∏', 'Á≠âÂæÖ', 'Êö´Á∑©']):
                        warnings.append(f"üìù Ëµ∑È£õÁãÄÊ≥Å: {airline_id}{flight_number} ‚Üí {destination} - {remark}")
                
                except Exception as e:
                    logger.error(f"ÂàÜÊûêËµ∑È£õËà™Áè≠Â§±Êïó: {e}")
        
        # ÂàÜÊûêÊäµÈÅîËà™Áè≠
        if arrival_data and isinstance(arrival_data, list):
            for flight in arrival_data:
                try:
                    airline_id = flight.get('AirlineID', '')
                    flight_number = flight.get('FlightNumber', '')
                    origin_code = flight.get('DepartureAirportID', '')
                    origin = airport_names.get(origin_code, origin_code)
                    schedule_time = flight.get('ScheduleArrivalTime', '')
                    actual_time = flight.get('ActualArrivalTime', '')
                    estimated_time = flight.get('EstimatedArrivalTime', '')
                    remark = flight.get('ArrivalRemark', '')
                    gate = flight.get('Gate', '')
                    
                    # Ê™¢Êü•ÂÅúÈ£õÊàñÂèñÊ∂àÁãÄÊ≥Å
                    if remark and any(keyword in remark for keyword in ['ÂèñÊ∂à', 'ÂÅúÈ£õ', 'CANCELLED', 'Êö´ÂÅú']):
                        warnings.append(f"üõ¨ ÊäµÈÅîÂÅúÈ£õ: {airline_id}{flight_number} ‚Üê {origin} ({schedule_time[:16]}) - {remark}")
                    
                    # Ê™¢Êü•Âª∂Ë™§ÁãÄÊ≥ÅÔºàÂØ¶ÈöõÊôÇÈñìËàáÊéíÂÆöÊôÇÈñìÂ∑ÆÁï∞Ôºâ
                    elif actual_time and schedule_time:
                        try:
                            schedule_dt = datetime.fromisoformat(schedule_time)
                            actual_dt = datetime.fromisoformat(actual_time)
                            delay_minutes = (actual_dt - schedule_dt).total_seconds() / 60
                            
                            # Âª∂Ë™§Ë∂ÖÈÅé30ÂàÜÈêòÊâçË≠¶Âëä
                            if delay_minutes >= 30:
                                warnings.append(f"‚è∞ ÊäµÈÅîÂª∂Ë™§: {airline_id}{flight_number} ‚Üê {origin} Âª∂Ë™§ {int(delay_minutes)} ÂàÜÈêò")
                        except:
                            pass
                    
                    # Ê™¢Êü•È†êË®àÊôÇÈñìÂª∂Ë™§
                    elif estimated_time and schedule_time and not actual_time:
                        try:
                            schedule_dt = datetime.fromisoformat(schedule_time)
                            estimated_dt = datetime.fromisoformat(estimated_time)
                            delay_minutes = (estimated_dt - schedule_dt).total_seconds() / 60
                            
                            if delay_minutes >= 30:
                                warnings.append(f"‚è∞ ÊäµÈÅîÈ†êË®àÂª∂Ë™§: {airline_id}{flight_number} ‚Üê {origin} È†êË®àÂª∂Ë™§ {int(delay_minutes)} ÂàÜÈêò")
                        except:
                            pass
                    
                    # Ê™¢Êü•ÁâπÊÆäÁãÄÊÖãÂÇôË®ª
                    if remark and any(keyword in remark for keyword in ['Âª∂Ë™§', 'Áï∞Â∏∏', 'Á≠âÂæÖ', 'Êö´Á∑©']):
                        warnings.append(f"üìù ÊäµÈÅîÁãÄÊ≥Å: {airline_id}{flight_number} ‚Üê {origin} - {remark}")
                
                except Exception as e:
                    logger.error(f"ÂàÜÊûêÊäµÈÅîËà™Áè≠Â§±Êïó: {e}")
        
        return warnings
    
    async def check_flight_conditions(self) -> List[str]:
        """Ê™¢Êü•ÈáëÈñÄÊ©üÂ†¥Ëà™Áè≠ÁãÄÊ≥Å"""
        logger.info("ÈñãÂßãÊ™¢Êü•ÈáëÈñÄÊ©üÂ†¥Ëà™Áè≠ÁãÄÊ≥Å...")
        
        # ‰∏¶Ë°åÂèñÂæóËµ∑ÈôçË≥áÊñô
        departure_task = self.get_departure_info()
        arrival_task = self.get_arrival_info()
        
        departure_data, arrival_data = await asyncio.gather(
            departure_task, arrival_task, return_exceptions=True
        )
        
        # ËôïÁêÜÁï∞Â∏∏ÊÉÖÊ≥Å
        if isinstance(departure_data, Exception):
            logger.error(f"ÂèñÂæóËµ∑È£õË≥áÊñôÂ§±Êïó: {departure_data}")
            departure_data = {}
        
        if isinstance(arrival_data, Exception):
            logger.error(f"ÂèñÂæóÊäµÈÅîË≥áÊñôÂ§±Êïó: {arrival_data}")
            arrival_data = {}
        
        # ÂàÜÊûêËà™Áè≠ÁãÄÊÖã
        flight_warnings = self.analyze_flight_status(departure_data, arrival_data)
        
        return flight_warnings

class TyphoonMonitor:
    def __init__(self):
        # Ë®≠ÂÆöSSLÈ©óË≠âÁÇ∫False‰ª•Ëß£Ê±∫macOSÁöÑSSLÂïèÈ°å
        self.client = httpx.AsyncClient(timeout=30.0, verify=False)
        
    async def get_weather_alerts(self) -> Dict:
        """ÂèñÂæóÂ§©Ê∞£ÁâπÂ†±Ë≥áË®ä"""
        try:
            url = f"{CWA_BASE_URL}/v1/rest/datastore/W-C0033-001"
            params = {
                "Authorization": API_KEY,
                "format": "JSON",
                "locationName": ",".join(MONITOR_LOCATIONS)
            }
            
            response = await self.client.get(url, params=params)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"ÂèñÂæóÂ§©Ê∞£ÁâπÂ†±Â§±Êïó: {e}")
            return {}
    
    async def get_typhoon_paths(self) -> Dict:
        """ÂèñÂæóÈ¢±È¢®Ë∑ØÂæëË≥áË®ä"""
        try:
            url = f"{CWA_BASE_URL}/v1/rest/datastore/W-C0034-005"
            params = {
                "Authorization": API_KEY,
                "format": "JSON"
            }
            
            response = await self.client.get(url, params=params)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"ÂèñÂæóÈ¢±È¢®Ë∑ØÂæëÂ§±Êïó: {e}")
            return {}
    
    async def get_weather_forecast(self) -> Dict:
        """ÂèñÂæó36Â∞èÊôÇÂ§©Ê∞£È†êÂ†±"""
        try:
            url = f"{CWA_BASE_URL}/v1/rest/datastore/F-C0032-001"
            params = {
                "Authorization": API_KEY,
                "format": "JSON",
                "locationName": ",".join(MONITOR_LOCATIONS)
            }
            
            response = await self.client.get(url, params=params)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"ÂèñÂæóÂ§©Ê∞£È†êÂ†±Â§±Êïó: {e}")
            return {}
    
    def analyze_alerts(self, alerts_data: Dict) -> List[str]:
        """ÂàÜÊûêË≠¶Â†±Ë≥áÊñô"""
        warnings = []
        
        if not alerts_data or 'records' not in alerts_data:
            return warnings
        
        try:
            for record in alerts_data.get('records', {}).get('location', []):
                location_name = record.get('locationName', '')
                if location_name in MONITOR_LOCATIONS:
                    hazards = record.get('hazardConditions', {}).get('hazards', [])
                    for hazard in hazards:
                        phenomena = hazard.get('phenomena', '')
                        significance = hazard.get('significance', '')
                        if 'È¢±È¢®' in phenomena or 'Âº∑È¢®' in phenomena:
                            warnings.append(f"‚ö†Ô∏è {location_name}: {phenomena} {significance}")
        except Exception as e:
            logger.error(f"ÂàÜÊûêË≠¶Â†±Ë≥áÊñôÂ§±Êïó: {e}")
        
        return warnings
    
    def analyze_typhoons(self, typhoon_data: Dict) -> List[str]:
        """ÂàÜÊûêÈ¢±È¢®Ë∑ØÂæëË≥áÊñô"""
        warnings = []
        
        if not typhoon_data or 'records' not in typhoon_data:
            return warnings
        
        try:
            for typhoon in typhoon_data.get('records', {}).get('typhoon', []):
                name = typhoon.get('typhoonName', 'Êú™Áü•È¢±È¢®')
                intensity = typhoon.get('intensity', {})
                max_wind = intensity.get('maximumWind', {}).get('value', 0)
                
                # Â¶ÇÊûúÊúÄÂ§ßÈ¢®ÈÄüË∂ÖÈÅé‰∏ÄÂÆöÂÄºÔºåÁôºÂá∫Ë≠¶Âëä
                # ÈáëÈñÄÊ©üÂ†¥ÂÅ¥È¢®ÂÅúÈ£õÊ®ôÊ∫ñÔºö25ÁØÄ(46.3 km/h)ÔºåÊö¥È¢®ÂúàÊ®ôÊ∫ñÔºö34ÁØÄ(63 km/h)
                if max_wind > 60:  # km/h - Ë™øÊï¥ÁÇ∫Êõ¥ÂØ¶ÈöõÁöÑËà™Áè≠È¢®Èö™ÈñæÂÄº
                    if max_wind > 80:
                        warnings.append(f"üåÄ {name}È¢±È¢® ÊúÄÂ§ßÈ¢®ÈÄü: {max_wind} km/h (Ëà™Áè≠È´òÈ¢®Èö™)")
                    else:
                        warnings.append(f"üåÄ {name}È¢±È¢® ÊúÄÂ§ßÈ¢®ÈÄü: {max_wind} km/h (Ëà™Áè≠ÂèØËÉΩÂΩ±Èüø)")
                    
                    # Ê™¢Êü•È†êÂ†±Ë∑ØÂæëÊòØÂê¶ÂΩ±ÈüøÁõÆÊ®ôÂçÄÂüü
                    forecasts = typhoon.get('forecast', [])
                    for forecast in forecasts:
                        location = forecast.get('location', {})
                        lat = location.get('lat', 0)
                        lon = location.get('lon', 0)
                        
                        # Á∞°ÂñÆÁöÑÂú∞ÁêÜÂçÄÂüüÂà§Êñ∑ÔºàÂè∞ÁÅ£ÁØÑÂúçÔºâ
                        if 22 <= lat <= 25.5 and 119 <= lon <= 122:
                            forecast_time = forecast.get('time', '')
                            warnings.append(f"üìç {name}È¢±È¢®È†êÂ†±Â∞áÊñº {forecast_time} Êé•ËøëÂè∞ÁÅ£")
                            break
        except Exception as e:
            logger.error(f"ÂàÜÊûêÈ¢±È¢®Ë≥áÊñôÂ§±Êïó: {e}")
        
        return warnings
    
    def analyze_weather(self, weather_data: Dict) -> List[str]:
        """ÂàÜÊûêÂ§©Ê∞£È†êÂ†±Ë≥áÊñô"""
        warnings = []
        
        if not weather_data or 'records' not in weather_data:
            return warnings
        
        try:
            for location in weather_data.get('records', {}).get('location', []):
                location_name = location.get('locationName', '')
                if location_name in MONITOR_LOCATIONS:
                    elements = location.get('weatherElement', [])
                    for element in elements:
                        element_name = element.get('elementName', '')
                        if element_name == 'Wx':  # Â§©Ê∞£ÁèæË±°
                            times = element.get('time', [])
                            for time_data in times:
                                start_time = time_data.get('startTime', '')
                                weather_desc = time_data.get('parameter', {}).get('parameterName', '')
                                
                                # Ê™¢Êü•ÊòØÂê¶ÊúâÊÉ°Âä£Â§©Ê∞£
                                if any(keyword in weather_desc for keyword in ['È¢±È¢®', 'Êö¥È¢®', 'Ë±™Èõ®', 'Â§ßÈõ®']):
                                    warnings.append(f"üåßÔ∏è {location_name} {start_time}: {weather_desc}")
        except Exception as e:
            logger.error(f"ÂàÜÊûêÂ§©Ê∞£Ë≥áÊñôÂ§±Êïó: {e}")
        
        return warnings
    
    async def check_all_conditions(self) -> Dict:
        """Ê™¢Êü•ÊâÄÊúâÊ¢ù‰ª∂"""
        logger.info("ÈñãÂßãÊ™¢Êü•Â§©Ê∞£Ê¢ù‰ª∂...")
        
        # ‰∏¶Ë°åÂèñÂæóÊâÄÊúâË≥áÊñô
        alerts_task = self.get_weather_alerts()
        typhoons_task = self.get_typhoon_paths()
        weather_task = self.get_weather_forecast()
        departure_task = airport_monitor.get_departure_info()
        arrival_task = airport_monitor.get_arrival_info()
        
        alerts_data, typhoons_data, weather_data, departure_data, arrival_data = await asyncio.gather(
            alerts_task, typhoons_task, weather_task, departure_task, arrival_task, return_exceptions=True
        )
        
        # Êõ¥Êñ∞ÂÖ®ÂüüÁãÄÊÖã
        global latest_alerts, latest_typhoons, latest_weather, latest_airport_departure, latest_airport_arrival, last_notification_status
        latest_alerts = alerts_data if not isinstance(alerts_data, Exception) else {}
        latest_typhoons = typhoons_data if not isinstance(typhoons_data, Exception) else {}
        latest_weather = weather_data if not isinstance(weather_data, Exception) else {}
        latest_airport_departure = departure_data if not isinstance(departure_data, Exception) else {}
        latest_airport_arrival = arrival_data if not isinstance(arrival_data, Exception) else {}
        
        # ÂàÜÊûêÊ©üÂ†¥Ë≥áÊñô
        flight_warnings = airport_monitor.analyze_flight_status(latest_airport_departure, latest_airport_arrival)
        
        # ÂàÜÊûêÊâÄÊúâË≥áÊñô
        alert_warnings = self.analyze_alerts(latest_alerts)
        typhoon_warnings = self.analyze_typhoons(latest_typhoons)
        weather_warnings = self.analyze_weather(latest_weather)
        
        all_warnings = alert_warnings + typhoon_warnings + weather_warnings + flight_warnings
        
        result = {
            "timestamp": datetime.now().isoformat(),
            "warnings": all_warnings,
            "status": "DANGER" if all_warnings else "SAFE",
            "travel_risk": self.assess_travel_risk(all_warnings),
            "checkup_risk": self.assess_checkup_risk(all_warnings)
        }
        
        # Ëº∏Âá∫Ë≠¶Â†±Âà∞ÊéßÂà∂Âè∞
        self.print_alerts(result)
        
        # Ê™¢Êü•ÊòØÂê¶ÈúÄË¶ÅÁôºÈÄÅLINEÈÄöÁü•
        await self.check_and_send_line_notification(result)
        
        return result
    
    async def check_and_send_line_notification(self, result: Dict):
        """Ê™¢Êü•‰∏¶ÁôºÈÄÅLINEÈÄöÁü•"""
        global last_notification_status
        current_status = result["status"]
        
        # Âè™Âú®ÁãÄÊÖãËÆäÂåñ‰∏îËÆäÁÇ∫DANGERÊôÇÁôºÈÄÅÈÄöÁü•
        if current_status == "DANGER" and last_notification_status != "DANGER":
            await line_notifier.push_typhoon_status_flex(result)
            logger.info("Â∑≤ÁôºÈÄÅLINEÈ¢®Èö™ Flex Message ÈÄöÁü•")
        
        # Êõ¥Êñ∞‰∏äÊ¨°ÈÄöÁü•ÁãÄÊÖã
        last_notification_status = current_status
    
    def assess_travel_risk(self, warnings: List[str]) -> str:
        """Ë©ï‰º∞7/6Ëà™Áè≠È¢®Èö™"""
        if not warnings:
            return "‰ΩéÈ¢®Èö™"
        
        typhoon_warnings = [w for w in warnings if 'È¢±È¢®' in w]
        wind_warnings = [w for w in warnings if 'Âº∑È¢®' in w or 'Êö¥È¢®' in w]
        flight_warnings = [w for w in warnings if 'ÂÅúÈ£õ' in w or 'ÂèñÊ∂à' in w]
        delay_warnings = [w for w in warnings if 'Âª∂Ë™§' in w]
        
        # ÂØ¶ÈöõËà™Áè≠Â∑≤ÊúâÂÅúÈ£õÊàñÂèñÊ∂àÔºåÈ¢®Èö™ÊúÄÈ´ò
        if flight_warnings:
            return "È´òÈ¢®Èö™ - Ëà™Áè≠Â∑≤ÂÅúÈ£õ/ÂèñÊ∂à"
        elif typhoon_warnings:
            return "È´òÈ¢®Èö™ - Âª∫Ë≠∞ËÄÉÊÖÆÊîπÊúü"
        elif delay_warnings:
            return "‰∏≠È¢®Èö™ - Ëà™Áè≠ÂèØËÉΩÂª∂Ë™§"
        elif wind_warnings:
            return "‰∏≠È¢®Èö™ - ÂØÜÂàáÈóúÊ≥®"
        else:
            return "‰∏≠È¢®Èö™ - ÊåÅÁ∫åÁõ£Êéß"
    
    def assess_checkup_risk(self, warnings: List[str]) -> str:
        """Ë©ï‰º∞7/7È´îÊ™¢È¢®Èö™"""
        if not warnings:
            return "‰ΩéÈ¢®Èö™"
        
        for warning in warnings:
            if 'Âè∞Âçó' in warning or 'Ëá∫Âçó' in warning:
                if 'È¢±È¢®' in warning:
                    return "È´òÈ¢®Èö™ - ÂèØËÉΩÂÅúÁè≠ÂÅúË™≤"
                elif 'Âº∑È¢®' in warning or 'Ë±™Èõ®' in warning:
                    return "‰∏≠È¢®Èö™ - ÂèØËÉΩÂΩ±Èüø‰∫§ÈÄö"
        
        return "‰ΩéÈ¢®Èö™"
    
    def print_alerts(self, result: Dict):
        """Âú®ÊéßÂà∂Âè∞Ëº∏Âá∫Ë≠¶Â†±"""
        print("\n" + "="*60)
        print(f"üö® È¢±È¢®Ë≠¶Ë®äÊí≠Â†±Á≥ªÁµ± - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*60)
        
        status = result["status"]
        if status == "DANGER":
            print("üî¥ Ë≠¶ÂëäÁãÄÊÖã: ÊúâÈ¢®Èö™")
        else:
            print("üü¢ ÂÆâÂÖ®ÁãÄÊÖã: ÁÑ°ÊòéÈ°ØÈ¢®Èö™")
        
        print(f"\n‚úàÔ∏è 7/6 ÈáëÈñÄ‚ÜíÂè∞ÂçóËà™Áè≠È¢®Èö™: {result['travel_risk']}")
        print(f"üè• 7/7 Âè∞ÂçóÈ´îÊ™¢È¢®Èö™: {result['checkup_risk']}")
        
        warnings = result["warnings"]
        if warnings:
            print("\nüì¢ ÁõÆÂâçË≠¶Â†±:")
            for warning in warnings:
                print(f"  {warning}")
        else:
            print("\n‚úÖ ÁõÆÂâçÁÑ°ÁâπÊÆäË≠¶Â†±")
        
        print("="*60)



# Âª∫Á´ãÁõ£ÊéßÂô®ÂØ¶‰æã
monitor = TyphoonMonitor()
airport_monitor = AirportMonitor()

async def continuous_monitoring():
    """ÊåÅÁ∫åÁõ£Êéß"""
    while True:
        try:
            await monitor.check_all_conditions()
            await asyncio.sleep(CHECK_INTERVAL)
        except Exception as e:
            logger.error(f"Áõ£ÊéßÈÅéÁ®ãÁôºÁîüÈåØË™§: {e}")
            await asyncio.sleep(CHECK_INTERVAL)

## ÁßªÈô§ËàäÁöÑ on_event ÂØ´Ê≥ïÔºåÂ∑≤ÊîπÁî® lifespan

# LINE Webhook ËôïÁêÜ
@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    """ËôïÁêÜLINEË®äÊÅØ‰∫ã‰ª∂"""
    user_id = event.source.user_id
    message_text = event.message.text.strip()
    
    # Â∞áÊñ∞Áî®Êà∂Âä†ÂÖ•Â•ΩÂèãÂàóË°®
    if user_id not in line_user_ids:
        line_user_ids.append(user_id)
        logger.info(f"Êñ∞Â¢ûLINEÂ•ΩÂèã: {user_id}")
    
    # ËôïÁêÜ‰∏çÂêåÈóúÈçµÂ≠ó
    if "È¢±È¢®ËøëÊ≥Å" in message_text:
        # ‰ΩøÁî®Áï∞Ê≠•ÊñπÂºèËôïÁêÜÔºàÂú®ÂØ¶ÈöõÁí∞Â¢É‰∏≠ÈúÄË¶ÅÊ≠£Á¢∫ËôïÁêÜÔºâ
        async def handle_typhoon_status():
            try:
                result = await monitor.check_all_conditions()
                await line_notifier.reply_typhoon_status_flex(event.reply_token, result)
            except Exception as e:
                logger.error(f"ËôïÁêÜÈ¢±È¢®ËøëÊ≥ÅÂ§±Êïó: {e}")
                # ÂõûÈÄÄÂà∞Á∞°ÂñÆÂõûË¶Ü
                await line_notifier.reply_message(event.reply_token, "Á≥ªÁµ±Êö´ÊôÇÁÑ°Ê≥ïÂèñÂæóË≥áÊñôÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ")
        
        asyncio.create_task(handle_typhoon_status())
    
    elif "Ê©üÂ†¥ÁãÄÊ≥Å" in message_text:
        async def handle_airport_status():
            try:
                departure_info = await airport_monitor.get_departure_info()
                arrival_info = await airport_monitor.get_arrival_info()
                flight_warnings = await airport_monitor.check_flight_conditions()
                
                airport_data = {
                    "departure_flights": departure_info,
                    "arrival_flights": arrival_info,
                    "warnings": flight_warnings,
                    "last_updated": datetime.now().isoformat()
                }
                
                await line_notifier.push_airport_status_flex(airport_data)
            except Exception as e:
                logger.error(f"ËôïÁêÜÊ©üÂ†¥ÁãÄÊ≥ÅÂ§±Êïó: {e}")
                await line_notifier.reply_message(event.reply_token, "ÁÑ°Ê≥ïÂèñÂæóÊ©üÂ†¥Ë≥áÊñôÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ")
        
        asyncio.create_task(handle_airport_status())
    
    elif "Ê∏¨Ë©¶" in message_text:
        async def handle_test():
            try:
                await line_notifier.send_test_notification_flex()
            except Exception as e:
                logger.error(f"ÁôºÈÄÅÊ∏¨Ë©¶Ë®äÊÅØÂ§±Êïó: {e}")
        
        asyncio.create_task(handle_test())
    
    else:
        # È†êË®≠ÂõûË¶Ü
        help_message = """üåÄ È¢±È¢®Ë≠¶Ë®äÊí≠Â†±Á≥ªÁµ±

ÂèØÁî®Êåá‰ª§Ôºö
‚Ä¢ È¢±È¢®ËøëÊ≥Å - Êü•ÁúãÂÆåÊï¥Áõ£ÊéßÁãÄÊ≥Å
‚Ä¢ Ê©üÂ†¥ÁãÄÊ≥Å - Êü•ÁúãÈáëÈñÄÊ©üÂ†¥Âç≥ÊôÇË≥áË®ä  
‚Ä¢ Ê∏¨Ë©¶ - ÁôºÈÄÅÊ∏¨Ë©¶Ë®äÊÅØ

Á≥ªÁµ±ÊúÉÂú®ÊúâÈ¢®Èö™ÊôÇ‰∏ªÂãïÊé®ÈÄÅÈÄöÁü•ÔºÅ"""
        
        asyncio.create_task(line_notifier.reply_message(event.reply_token, help_message))

@app.post("/webhook")
async def line_webhook(request: Request):
    """LINE WebhookÁ´ØÈªû"""
    signature = request.headers.get('X-Line-Signature', '')
    body = await request.body()
    
    # È©óË≠âÁ∞ΩÂêç
    if not _verify_signature(body, signature):
        raise HTTPException(status_code=403, detail="Invalid signature")
    
    try:
        handler.handle(body.decode('utf-8'), signature)
    except InvalidSignatureError:
        raise HTTPException(status_code=403, detail="Invalid signature")
    
    return "OK"

def _verify_signature(body: bytes, signature: str) -> bool:
    """È©óË≠âLINEÁ∞ΩÂêç"""
    hash_val = hmac.new(
        LINE_CHANNEL_SECRET.encode('utf-8'),
        body,
        hashlib.sha256
    ).digest()
    expected_signature = base64.b64encode(hash_val).decode('utf-8')
    return signature == expected_signature

@app.get("/")
async def get_dashboard():
    """ÂèñÂæóÁõ£ÊéßÂÑÄË°®Êùø"""
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>È¢±È¢®Ë≠¶Ë®äÊí≠Â†±Á≥ªÁµ± + ÈáëÈñÄÊ©üÂ†¥Áõ£Êéß</title>
        <meta charset="utf-8">
        <meta http-equiv="refresh" content="60">
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
            .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }}
            .status-safe {{ color: green; font-size: 24px; font-weight: bold; }}
            .status-danger {{ color: red; font-size: 24px; font-weight: bold; }}
            .warning-item {{ background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; margin: 5px 0; border-radius: 5px; }}
            .risk-high {{ color: red; font-weight: bold; }}
            .risk-medium {{ color: orange; font-weight: bold; }}
            .risk-low {{ color: green; font-weight: bold; }}
            .update-time {{ color: #666; font-size: 14px; }}
            .explain-block {{ background: #e3f2fd; border-left: 5px solid #1976d2; padding: 16px; margin: 24px 0; border-radius: 8px; }}
            .explain-block h2 {{ margin-top: 0; color: #1976d2; }}
            .explain-block ul {{ margin: 0 0 0 1.5em; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üåÄ È¢±È¢®Ë≠¶Ë®äÊí≠Â†±Á≥ªÁµ± + ‚úàÔ∏è ÈáëÈñÄÊ©üÂ†¥Áõ£Êéß</h1>
            <p class="update-time">ÊúÄÂæåÊõ¥Êñ∞: <span id="updateTime">ËºâÂÖ•‰∏≠...</span></p>
            <div id="status">ËºâÂÖ•‰∏≠...</div>
            <div id="travelRisk">ËºâÂÖ•‰∏≠...</div>
            <div id="checkupRisk">ËºâÂÖ•‰∏≠...</div>
            <div id="warnings">ËºâÂÖ•‰∏≠...</div>

            <div class="explain-block">
                <h2>üîé ÂàÜÊûêÈÇèËºØËàáÊñπÊ≥ïË™™Êòé</h2>
                <ul>
                    <li><b>Â§©Ê∞£ÁâπÂ†±</b>ÔºöÁõ¥Êé•Êé°Áî®‰∏≠Â§ÆÊ∞£Ë±°ÁΩ≤APIÁöÑË≠¶ÁâπÂ†±ÁµêÊûúÔºåËã•ÈáëÈñÄÊàñÂè∞ÂçóÊúâ„ÄåÈ¢±È¢®„ÄçÊàñ„ÄåÂº∑È¢®„ÄçÁ≠âÁèæË±°ÔºåÂâáÂàóÁÇ∫Ë≠¶Â†±„ÄÇ</li>
                    <li><b>È¢±È¢®Ë∑ØÂæë</b>Ôºö
                        <ul>
                            <li>Ëã•È¢±È¢®ÊúÄÂ§ßÈ¢®ÈÄü <b>Ë∂ÖÈÅé60 km/h</b>ÔºåÂâáÂàóÁÇ∫Ë≠¶Â†±ÔºàÊé•ËøëÈáëÈñÄÊ©üÂ†¥ÂÅúÈ£õÊ®ôÊ∫ñÔºâ„ÄÇ</li>
                            <li>Ëã•È¢±È¢®ÊúÄÂ§ßÈ¢®ÈÄü <b>Ë∂ÖÈÅé80 km/h</b>ÔºåÂâáÂàóÁÇ∫È´òÈ¢®Èö™Ë≠¶Â†±„ÄÇ</li>
                            <li>Ëã•È¢±È¢®È†êÂ†±Ë∑ØÂæëÂ∫ßÊ®ô <b>ËêΩÂú®Âè∞ÁÅ£Á∂ìÁ∑ØÂ∫¶ÁØÑÂúçÔºàÁ∑ØÂ∫¶22~25.5ÔºåÁ∂ìÂ∫¶119~122Ôºâ</b>ÔºåÂâáË¶ñÁÇ∫„ÄåÊé•ËøëÂè∞ÁÅ£„Äç‰∏¶Ë≠¶Á§∫„ÄÇ</li>
                            <li><small>üìç ÂèÉËÄÉÔºöÈáëÈñÄÊ©üÂ†¥ÂÅ¥È¢®ÂÅúÈ£õÊ®ôÊ∫ñÁÇ∫25ÁØÄ(46.3 km/h)ÔºåÊö¥È¢®ÂúàÊ®ôÊ∫ñÁÇ∫34ÁØÄ(63 km/h)</small></li>
                        </ul>
                    </li>
                    <li><b>Â§©Ê∞£È†êÂ†±</b>Ôºö
                        <ul>
                            <li>Ëã•36Â∞èÊôÇÂÖßÈ†êÂ†±Êúâ„ÄåÈ¢±È¢®„Äç„ÄÅ„ÄåÊö¥È¢®„Äç„ÄÅ„ÄåË±™Èõ®„Äç„ÄÅ„ÄåÂ§ßÈõ®„ÄçÁ≠âÈóúÈçµÂ≠óÔºåÂâáÂàóÁÇ∫Ë≠¶Â†±„ÄÇ</li>
                        </ul>
                    </li>
                    <li><b>ÈáëÈñÄÊ©üÂ†¥Âç≥ÊôÇÁõ£Êéß</b>Ôºö
                        <ul>
                            <li>Áõ£ÊéßÈáëÈñÄÊ©üÂ†¥ÔºàKNHÔºâËµ∑È£õÂíåÊäµÈÅîËà™Áè≠ÁöÑÂç≥ÊôÇÁãÄÊ≥Å„ÄÇ</li>
                            <li>Ëã•Ëà™Áè≠ÁãÄÊÖãÁÇ∫„ÄåÂèñÊ∂à„ÄçÊàñ„ÄåÂÅúÈ£õ„ÄçÔºåÁ´ãÂç≥ÂàóÁÇ∫È´òÈ¢®Èö™Ë≠¶Â†±„ÄÇ</li>
                            <li>Ëã•È†êË®àÊôÇÈñìÊØîÊéíÂÆöÊôÇÈñì <b>Âª∂Ë™§30ÂàÜÈêò‰ª•‰∏ä</b>ÔºåÂàóÁÇ∫Âª∂Ë™§Ë≠¶Â†±„ÄÇ</li>
                            <li>Ëã•ÂÇôË®ª‰∏≠ÂåÖÂê´„ÄåÂª∂Ë™§„Äç„ÄÅ„ÄåÂèñÊ∂à„Äç„ÄÅ„ÄåÂÅúÈ£õ„ÄçÁ≠âÈóúÈçµÂ≠óÔºåÂàóÁÇ∫Áï∞Â∏∏Ë≠¶Â†±„ÄÇ</li>
                        </ul>
                    </li>
                    <li><b>Ëà™Áè≠/È´îÊ™¢È¢®Èö™Ë©ï‰º∞</b>Ôºö
                        <ul>
                            <li>Ëã•ÊúâÂØ¶ÈöõËà™Áè≠ÂÅúÈ£õ/ÂèñÊ∂àÔºåËà™Áè≠ÂàóÁÇ∫„ÄåÈ´òÈ¢®Èö™„ÄçÔºàÂÑ™ÂÖàÁ¥öÊúÄÈ´òÔºâ„ÄÇ</li>
                            <li>Ëã•ÊúâÈ¢±È¢®Ë≠¶Â†±ÔºåËà™Áè≠ÂàóÁÇ∫„ÄåÈ´òÈ¢®Èö™„ÄçÔºõÊúâÂº∑È¢®ÂâáÁÇ∫„Äå‰∏≠È¢®Èö™„Äç„ÄÇ</li>
                            <li>Ëã•ÊúâËà™Áè≠Âª∂Ë™§ÔºåÂàóÁÇ∫„Äå‰∏≠È¢®Èö™„Äç„ÄÇ</li>
                            <li>Âè∞ÂçóÊúâÈ¢±È¢®Ë≠¶Â†±ÔºåÈ´îÊ™¢ÂàóÁÇ∫„ÄåÈ´òÈ¢®Èö™„ÄçÔºõÊúâÂº∑È¢®ÊàñË±™Èõ®ÂâáÁÇ∫„Äå‰∏≠È¢®Èö™„Äç„ÄÇ</li>
                        </ul>
                    </li>
                </ul>
                <p style="color:#555;font-size:14px;">ÔºàÊâÄÊúâÂàÜÊûêË¶èÂâáÁöÜÂèØÊñºÁ®ãÂºèÁ¢ºÂÖßÂêÑÂàÜÊûêÊñπÊ≥ïÊü•Èñ±ËàáË™øÊï¥„ÄÇÊ©üÂ†¥Ë≥áÊñô‰æÜÊ∫êÔºö‰∫§ÈÄöÈÉ®TDXÈÅãËº∏Ë≥áÊñôÊµÅÈÄöÊúçÂãôÔºâ</p>
            </div>
        </div>
        <script>
            async function updateData() {{
                try {{
                    const response = await fetch('/api/status');
                    const data = await response.json();
                    document.getElementById('updateTime').textContent = new Date(data.timestamp).toLocaleString('zh-TW');
                    const statusDiv = document.getElementById('status');
                    if (data.status === 'DANGER') {{
                        statusDiv.innerHTML = '<div class="status-danger">üî¥ Ë≠¶ÂëäÁãÄÊÖã: ÊúâÈ¢®Èö™</div>';
                    }} else {{
                        statusDiv.innerHTML = '<div class="status-safe">üü¢ ÂÆâÂÖ®ÁãÄÊÖã: ÁÑ°ÊòéÈ°ØÈ¢®Èö™</div>';
                    }}
                    document.getElementById('travelRisk').innerHTML = `<p>‚úàÔ∏è 7/6 ÈáëÈñÄ‚ÜíÂè∞ÂçóËà™Áè≠È¢®Èö™: <span class="risk-${{getRiskClass(data.travel_risk)}}">${{data.travel_risk}}</span></p>`;
                    document.getElementById('checkupRisk').innerHTML = `<p>üè• 7/7 Âè∞ÂçóÈ´îÊ™¢È¢®Èö™: <span class="risk-${{getRiskClass(data.checkup_risk)}}">${{data.checkup_risk}}</span></p>`;
                    const warningsDiv = document.getElementById('warnings');
                    if (data.warnings.length > 0) {{
                        warningsDiv.innerHTML = '<h3>üì¢ ÁõÆÂâçË≠¶Â†±:</h3>' + 
                            data.warnings.map(w => `<div class="warning-item">${{w}}</div>`).join('');
                    }} else {{
                        warningsDiv.innerHTML = '<h3>‚úÖ ÁõÆÂâçÁÑ°ÁâπÊÆäË≠¶Â†±</h3>';
                    }}
                }} catch (error) {{
                    console.error('Êõ¥Êñ∞Ë≥áÊñôÂ§±Êïó:', error);
                }}
            }}
            function getRiskClass(risk) {{
                if (risk.includes('È´òÈ¢®Èö™')) return 'high';
                if (risk.includes('‰∏≠È¢®Èö™')) return 'medium';
                return 'low';
            }}
            // ÊØè30ÁßíÊõ¥Êñ∞‰∏ÄÊ¨°
            updateData();
            setInterval(updateData, 30000);
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/api/status")
async def get_status():
    """ÂèñÂæóÁõÆÂâçÁãÄÊÖã"""
    return await monitor.check_all_conditions()

@app.get("/api/raw-data")
async def get_raw_data():
    """ÂèñÂæóÂéüÂßãË≥áÊñô"""
    return {
        "alerts": latest_alerts,
        "typhoons": latest_typhoons,
        "weather": latest_weather,
        "airport_departure": latest_airport_departure,
        "airport_arrival": latest_airport_arrival
    }

@app.get("/api/line/friends")
async def get_line_friends():
    """ÂèñÂæóLINEÂ•ΩÂèãÂàóË°®"""
    return {
        "friends_count": len(line_user_ids),
        "last_notification_status": last_notification_status
    }

@app.post("/api/line/test-notification")
async def send_test_notification():
    """ÁôºÈÄÅÊ∏¨Ë©¶ÈÄöÁü•Áµ¶ÊâÄÊúâLINEÂ•ΩÂèã"""
    await line_notifier.send_test_notification_flex()
    
    return {
        "message": "Ê∏¨Ë©¶ Flex Message Â∑≤ÁôºÈÄÅ",
        "sent_to": len(line_user_ids),
        "friends": line_user_ids
    }

@app.post("/api/line/test-airport-notification")
async def send_test_airport_notification():
    """ÁôºÈÄÅÊ©üÂ†¥ÁãÄÊ≥ÅÊ∏¨Ë©¶ÈÄöÁü•Áµ¶ÊâÄÊúâLINEÂ•ΩÂèã"""
    try:
        departure_info = await airport_monitor.get_departure_info()
        arrival_info = await airport_monitor.get_arrival_info()
        flight_warnings = await airport_monitor.check_flight_conditions()
        
        airport_data = {
            "departure_flights": departure_info,
            "arrival_flights": arrival_info,
            "warnings": flight_warnings,
            "last_updated": datetime.now().isoformat()
        }
        
        await line_notifier.push_airport_status_flex(airport_data)
        
        return {
            "message": "Ê©üÂ†¥ÁãÄÊ≥Å Flex Message Â∑≤ÁôºÈÄÅ",
            "sent_to": len(line_user_ids),
            "airport_data": {
                "departure_count": len(departure_info) if isinstance(departure_info, list) else 0,
                "arrival_count": len(arrival_info) if isinstance(arrival_info, list) else 0,
                "warnings_count": len(flight_warnings)
            }
        }
    except Exception as e:
        logger.error(f"ÁôºÈÄÅÊ©üÂ†¥Ê∏¨Ë©¶ÈÄöÁü•Â§±Êïó: {e}")
        return {
            "error": "ÁôºÈÄÅÂ§±Êïó",
            "message": str(e)
        }

@app.get("/api/airport")
async def get_airport_status():
    """ÂèñÂæóÈáëÈñÄÊ©üÂ†¥Âç≥ÊôÇËµ∑ÈôçË≥áË®ä"""
    departure_info = await airport_monitor.get_departure_info()
    arrival_info = await airport_monitor.get_arrival_info()
    flight_warnings = await airport_monitor.check_flight_conditions()
    
    return {
        "departure_flights": departure_info,
        "arrival_flights": arrival_info,
        "warnings": flight_warnings,
        "last_updated": datetime.now().isoformat()
    }

def main():
    """‰∏ªÂáΩÊï∏"""
    print("üåÄ È¢±È¢®Ë≠¶Ë®äÊí≠Â†±Á≥ªÁµ±ÂïüÂãï‰∏≠...")
    print("üìù Á≥ªÁµ±Ë≥áË®ä:")
    print(f"- Áõ£ÊéßÂú∞ÂçÄ: {', '.join(MONITOR_LOCATIONS)}")
    print(f"- Ê™¢Êü•ÈñìÈöî: {CHECK_INTERVAL} Áßí")
    print(f"- ÊúçÂãôÁ´ØÂè£: {SERVER_PORT}")
    print(f"- ÊóÖË°åÊó•Êúü: {TRAVEL_DATE}")
    print(f"- È´îÊ™¢Êó•Êúü: {CHECKUP_DATE}")
    print("- Ê©üÂ†¥Áõ£Êéß: ÈáëÈñÄÊ©üÂ†¥ (KNH) Ëµ∑ÈôçË≥áË®ä")
    print("- ÈÄöÁü•ÊñπÂºè: LINE Bot Flex Message (ÊîØÊè¥Ë¶ñË¶∫ÂåñÈÄöÁü•)")
    
    if not API_KEY:
        print("‚ö†Ô∏è Ë≠¶Âëä: ‰∏≠Â§ÆÊ∞£Ë±°ÁΩ≤API KEYÂ∞öÊú™Ë®≠ÂÆö")
    if not LINE_CHANNEL_ACCESS_TOKEN:
        print("‚ö†Ô∏è Ë≠¶Âëä: LINE ACCESS TOKENÂ∞öÊú™Ë®≠ÂÆöÔºåLINEÂäüËÉΩÂ∞áÁÑ°Ê≥ï‰ΩøÁî®")
    
    print("\nüì± LINE Bot Êåá‰ª§:")
    print("- 'È¢±È¢®ËøëÊ≥Å' - Êü•ÁúãÂÆåÊï¥Áõ£ÊéßÁãÄÊ≥Å (Flex Message)")
    print("- 'Ê©üÂ†¥ÁãÄÊ≥Å' - Êü•ÁúãÈáëÈñÄÊ©üÂ†¥Âç≥ÊôÇË≥áË®ä (Flex Message)")
    print("- 'Ê∏¨Ë©¶' - ÁôºÈÄÅÊ∏¨Ë©¶Ë®äÊÅØ (Flex Message)")
    
    print("\nüîó API Á´ØÈªû:")
    print(f"- Áõ£ÊéßÂÑÄË°®Êùø: http://localhost:{SERVER_PORT}/")
    print(f"- Ê∏¨Ë©¶ Flex ÈÄöÁü•: POST http://localhost:{SERVER_PORT}/api/line/test-notification")
    print(f"- Ê∏¨Ë©¶Ê©üÂ†¥ Flex ÈÄöÁü•: POST http://localhost:{SERVER_PORT}/api/line/test-airport-notification")
    
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=SERVER_PORT)

if __name__ == "__main__":
    main()
