"""
LINE Flex Message Builder for Typhoon Weather Monitor
Creates visual notification messages for LINE Bot
"""

import logging

import json
from datetime import datetime
from typing import Dict, List
from linebot.v3.messaging import FlexContainer, FlexMessage
from linebot.v3.messaging.models import (
    URIAction, FlexComponent
)
from config.settings import settings

logger = logging.getLogger(__name__)


def validate_uri(uri: str) -> str:
    """
    Validate and fix URI for LINE Bot usage
    LINE Bot requires proper URI schemes (http/https) and rejects localhost
    """
    if not uri:
        return "https://example.com"
    
    # Check if URI already has a scheme
    if not uri.startswith(('http://', 'https://')):
        # Add https scheme if missing
        uri = f"https://{uri}"
    
    # LINE Bot doesn't accept localhost URLs, use a placeholder
    if 'localhost' in uri or '127.0.0.1' in uri:
        return "https://example.com"
    
    return uri


class FlexMessageBuilder:

    def _error_flex_message(self, alt_text: str, main_text: str, sub_text: str) -> FlexMessage:
        """
        Helper to create a simple error FlexMessage.
        """
        error_content = {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": main_text,
                        "weight": "bold",
                        "size": "lg"
                    },
                    {
                        "type": "text",
                        "text": sub_text,
                        "size": "sm",
                        "color": "#999999",
                        "margin": "md"
                    }
                ]
            }
        }
        try:
            flex_container = FlexContainer.from_json(json.dumps(error_content))
            return FlexMessage(alt_text=alt_text, contents=flex_container)
        except Exception as e:
            logger.error(f"Error creating error flex message: {e}")
            # If FlexContainer creation fails, return a simple text message wrapped in FlexMessage
            simple_error = {
                "type": "bubble",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": main_text
                        }
                    ]
                }
            }
            flex_container = FlexContainer.from_json(json.dumps(simple_error))
            return FlexMessage(alt_text=alt_text, contents=flex_container)
    # (class-level docstring removed, see __init__ for details)

    def __init__(self, base_url: str = None):
        """
        ÂàùÂßãÂåñ FlexMessageBuilder

        Args:
            base_url: ÊáâÁî®Á®ãÂºèÁöÑÂü∫Êú¨URLÔºåÁî®ÊñºÁîüÊàêÈÄ£Áµê
        """
        self.base_url = base_url or settings.get_base_url()

    def create_typhoon_status_flex(self, result: Dict) -> FlexMessage:
        """
        ÂâµÂª∫È¢±È¢®ÁãÄÊÖãÁöÑ Flex Message

        Args:
            result: ÂåÖÂê´È¢±È¢®Áõ£ÊéßÁµêÊûúÁöÑÂ≠óÂÖ∏
        Returns:
            FlexMessage: LINE Flex Message Áâ©‰ª∂
        """
        try:
            timestamp = datetime.fromisoformat(
                result["timestamp"].replace('Z', '+00:00'))
            status_color = "#FF4757" if result["status"] == "DANGER" else "#2ED573"
            status_icon = "üî¥" if result["status"] == "DANGER" else "üü¢"
            status_text = "ÊúâÈ¢®Èö™" if result["status"] == "DANGER" else "ÁÑ°ÊòéÈ°ØÈ¢®Èö™"

            def get_risk_color(risk_text: str) -> str:
                if "È´òÈ¢®Èö™" in risk_text:
                    return "#FF4757"
                elif "‰∏≠È¢®Èö™" in risk_text:
                    return "#FFA726"
                else:
                    return "#2ED573"

            body_contents = [
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": status_icon,
                            "size": "xl",
                            "flex": 0
                        },
                        {
                            "type": "text",
                            "text": f"Ë≠¶ÂëäÁãÄÊÖã: {status_text}",
                            "weight": "bold",
                            "size": "md",
                            "color": status_color,
                            "margin": "sm",
                            "flex": 1
                        }
                    ]
                },
                {
                    "type": "separator",
                    "margin": "md"
                },
                {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "md",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üéØ È¢®Èö™Ë©ï‰º∞",
                            "weight": "bold",
                            "color": "#333333",
                            "size": "sm"
                        },
                        {
                            "type": "box",
                            "layout": "vertical",
                            "margin": "xs",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": f"‚úàÔ∏è Ëà™Áè≠È¢®Èö™: {result['travel_risk']}",
                                    "size": "xs",
                                    "color": get_risk_color(result['travel_risk']),
                                    "weight": "bold"
                                },
                                {
                                    "type": "text",
                                    "text": f"üè• È´îÊ™¢È¢®Èö™: {result['checkup_risk']}",
                                    "size": "xs",
                                    "color": get_risk_color(result['checkup_risk']),
                                    "weight": "bold",
                                    "margin": "xs"
                                }
                            ]
                        }
                    ]
                }
            ]

            # Ê∑ªÂä†Ë≠¶ÂëäË®äÊÅØ
            if result.get("warnings"):
                body_contents.extend([
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "margin": "md",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üå™Ô∏è Â§©Ê∞£Ë≠¶Â†±",
                                "weight": "bold",
                                "color": "#F57C00",
                                "size": "sm"
                            }
                        ] + [
                            {
                                "type": "text",
                                "text": f"‚Ä¢ {warning}",
                                "size": "xs",
                                "color": "#666666",
                                "wrap": True,
                                "margin": "xs"
                            } for warning in result["warnings"][:3]  # ÊúÄÂ§öÈ°ØÁ§∫3ÂÄãË≠¶Âëä
                        ]
                    }
                ])
            else:
                body_contents.extend([
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "margin": "md",
                        "contents": [
                            {
                                "type": "text",
                                "text": "‚úÖ ÁõÆÂâçÁÑ°ÁâπÊÆäË≠¶Â†±",
                                "color": "#2ED573",
                                "size": "sm",
                                "weight": "bold"
                            }
                        ]
                    }
                ])

            flex_content = {
                "type": "bubble",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üåÄ È¢±È¢®Ë≠¶Ë®äÊí≠Â†±",
                            "weight": "bold",
                            "size": "lg",
                            "color": "#FFFFFF"
                        },
                        {
                            "type": "text",
                            "text": timestamp.strftime('%Y-%m-%d %H:%M'),
                            "size": "xs",
                            "color": "#FFFFFF",
                            "margin": "xs"
                        }
                    ],
                    "backgroundColor": status_color,
                    "paddingAll": "md"
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": body_contents
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "spacing": "sm",
                    "contents": [
                        {
                            "type": "button",
                            "style": "primary",
                            "height": "sm",
                            "action": {
                                "type": "uri",
                                "label": "Ë©≥Á¥∞Ë≥áÊñô",
                                "uri": validate_uri(self.base_url)
                            }
                        }
                    ],
                    "margin": "sm"
                }
            }

            try:
                flex_container = FlexContainer.from_json(json.dumps(flex_content))
                return FlexMessage(alt_text="È¢±È¢®Ë≠¶Ë®äÈÄöÁü•", contents=flex_container)
            except Exception as json_error:
                logger.error(f"Error creating FlexContainer from JSON: {json_error}")
                logger.error(f"JSON content: {json.dumps(flex_content, indent=2)}")
                raise

        except KeyError as e:
            logger.error(f"Missing key in result data for flex message: {e}")
            return self._error_flex_message("Ë≥áÊñôÈåØË™§", f"Áº∫Â∞ëÂøÖË¶ÅÊ¨Ñ‰Ωç: {e}", "Ë´ãÊ™¢Êü•Áõ£ÊéßÁ≥ªÁµ±ÁöÑËº∏Âá∫Ë≥áÊñô„ÄÇ")
        except Exception as e:
            logger.error(
                f"Error creating typhoon status flex message: {e}", exc_info=True)
            return self._error_flex_message("Âª∫Á´ãÂ§±Êïó", "ÁÑ°Ê≥ïÁîüÊàêÈ¢±È¢®ÁãÄÊÖãÈÄöÁü•", "Á≥ªÁµ±ÁôºÁîüÊú™È†êÊúüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ")

    def create_airport_status_flex(self, airport_data: Dict) -> 'FlexMessage':
        """
        ÂâµÂª∫Ê©üÂ†¥ÁãÄÊÖãÁöÑ Flex Message (Â∑≤Á¶ÅÁî®)

        Args:
            airport_data: ÂåÖÂê´Ê©üÂ†¥Ë≥áË®äÁöÑÂ≠óÂÖ∏

        Returns:
            FlexMessage: LINE Flex Message Áâ©‰ª∂
        """
        logger.warning("Airport functionality is disabled")

        # ËøîÂõûÁ¶ÅÁî®ÈÄöÁü•
        flex_content = {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "‚úàÔ∏è Ê©üÂ†¥ÂäüËÉΩÂ∑≤Á¶ÅÁî®",
                        "size": "md",
                        "color": "#666666"
                    },
                    {
                        "type": "text",
                        "text": "Ê©üÂ†¥È¢®Èö™Ê™¢Êü•ÂäüËÉΩÂõ† API ÈôêÂà∂Êö´ÊôÇÁ¶ÅÁî®",
                        "size": "sm",
                        "color": "#999999",
                        "wrap": True,
                        "margin": "sm"
                    }
                ]
            }
        }
        try:
            flex_container = FlexContainer.from_json(json.dumps(flex_content))
            return FlexMessage(alt_text="Ê©üÂ†¥ÂäüËÉΩÂ∑≤Á¶ÅÁî®", contents=flex_container)
        except Exception as json_error:
            logger.error(f"Error creating airport status FlexContainer: {json_error}")
            return self._error_flex_message("Âª∫Á´ãÂ§±Êïó", "Ê©üÂ†¥ÂäüËÉΩÂ∑≤Á¶ÅÁî®", "ÁÑ°Ê≥ïÂª∫Á´ãÊ©üÂ†¥ÁãÄÊÖãÈÄöÁü•")

    def create_test_notification_flex(self, message: str = "ÈÄôÊòØÊ∏¨Ë©¶Ë®äÊÅØ") -> 'FlexMessage':
        """
        ÂâµÂª∫Ê∏¨Ë©¶ÈÄöÁü•ÁöÑ Flex Message

        Args:
            message: Ê∏¨Ë©¶Ë®äÊÅØÂÖßÂÆπ

        Returns:
            FlexMessage: LINE Flex Message Áâ©‰ª∂
        """
        timestamp = datetime.now()

        flex_content = {
            "type": "bubble",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üß™ Á≥ªÁµ±Ê∏¨Ë©¶",
                        "weight": "bold",
                        "size": "lg",
                        "color": "#FFFFFF"
                    },
                    {
                        "type": "text",
                        "text": timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                        "size": "xs",
                        "color": "#FFFFFF",
                        "margin": "xs"
                    }
                ],
                "backgroundColor": "#9C27B0",
                "paddingAll": "md"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": message,
                        "size": "md",
                        "color": "#333333",
                        "wrap": True
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "text",
                        "text": "‚úÖ LINE Bot ÈÄ£Á∑öÊ≠£Â∏∏\nüì° Áõ£ÊéßÁ≥ªÁµ±ÈÅã‰Ωú‰∏≠\nüîî ÈÄöÁü•ÂäüËÉΩÊ≠£Â∏∏",
                        "size": "sm",
                        "color": "#666666",
                        "margin": "md"
                    }
                ]
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "button",
                        "action": {
                            "type": "uri",
                            "label": "ËøîÂõûÁõ£ÊéßÂÑÄË°®Êùø",
                            "uri": validate_uri(self.base_url)
                        },
                        "style": "secondary"
                    }
                ],
                "margin": "sm"
            }
        }
        try:
            flex_container = FlexContainer.from_json(json.dumps(flex_content))
            return FlexMessage(alt_text="Á≥ªÁµ±Ê∏¨Ë©¶", contents=flex_container)
        except Exception as json_error:
            logger.error(f"Error creating test notification FlexContainer: {json_error}")
            return self._error_flex_message("Âª∫Á´ãÂ§±Êïó", "Á≥ªÁµ±Ê∏¨Ë©¶", "ÁÑ°Ê≥ïÂª∫Á´ãÊ∏¨Ë©¶ÈÄöÁü•")

    def create_carousel_flex(self, bubbles: List[Dict]) -> 'FlexMessage':
        """
        ÂâµÂª∫Ëº™Êí≠Âºè Flex Message

        Args:
            bubbles: ÂåÖÂê´Â§öÂÄã bubble ÂÖßÂÆπÁöÑÂàóË°®

        Returns:
            FlexMessage: LINE Flex Message Áâ©‰ª∂
        """
        flex_content = {
            "type": "carousel",
            "contents": bubbles
        }
        try:
            flex_container = FlexContainer.from_json(json.dumps(flex_content))
            return FlexMessage(alt_text="Â§öÈ†ÖË≥áË®ä", contents=flex_container)
        except Exception as json_error:
            logger.error(f"Error creating carousel FlexContainer: {json_error}")
            return self._error_flex_message("Âª∫Á´ãÂ§±Êïó", "Â§öÈ†ÖË≥áË®ä", "ÁÑ°Ê≥ïÂª∫Á´ãËº™Êí≠Ë®äÊÅØ")

    def _get_typhoon_details_flex_content(self) -> List[Dict]:
        """Áç≤ÂèñÈ¢±È¢®Ë©≥Á¥∞Ë≥áÊñôÁöÑ Flex Message ÂÖßÂÆπ"""
        try:
            from utils.helpers import get_global_data
            typhoon_data = get_global_data('typhoon_data')

            if not typhoon_data:
                return [{
                    "type": "text",
                    "text": "ÁõÆÂâçÊ≤íÊúâÈ¢±È¢®Ë©≥Á¥∞Ë≥áÊñô„ÄÇ",
                    "wrap": True,
                    "color": "#666666"
                }]

            contents = []
            for typhoon in typhoon_data:
                contents.append({
                    "type": "box",
                    "layout": "vertical",
                    "margin": "md",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"È¢±È¢®ÂêçÁ®±: {typhoon.get('name', 'N/A')}",
                            "weight": "bold"
                        },
                        {
                            "type": "text",
                            "text": f"Ë∑ùÈõ¢: {typhoon.get('distance', 'N/A')} km",
                            "size": "sm"
                        }
                    ]
                })
            return contents
        except Exception as e:
            logger.error(
                f"Error getting typhoon details for flex content: {e}", exc_info=True)
            return [{
                "type": "text",
                "text": "ÁÑ°Ê≥ïËºâÂÖ•È¢±È¢®Ë©≥Á¥∞Ë≥áÊñô„ÄÇ",
                "wrap": True,
                "color": "#FF4757"
            }]
